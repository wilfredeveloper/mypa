#!/usr/bin/env python3
"""
Test the exact original failing case from the issue.
"""

import sys
import os
import json

# Add the backend directory to the Python path
sys.path.insert(0, os.path.join(os.path.dirname(__file__)))

from app.agents.personal_assistant.tools.external.google_calendar import GoogleCalendarTool


def test_original_failing_case():
    """Test the exact failing case from the issue description."""
    
    print("üîç Testing Original Failing Case")
    print("=" * 50)
    
    tool = GoogleCalendarTool(user=None, db=None, registry=None, user_access=None)
    
    # The exact failing input from the issue: {recurrence: [RRULE:FREQ=DAILY]}
    print("\n‚ùå Original failing input: {recurrence: [RRULE:FREQ=DAILY]}")
    
    failing_input = "{recurrence: [RRULE:FREQ=DAILY]}"
    
    try:
        # This should have failed before our fix
        result = tool._parse_event_data(failing_input)
        print(f"‚úÖ Now parses successfully: {result}")
        
        # Verify the structure is correct
        assert isinstance(result, dict)
        assert "recurrence" in result
        assert result["recurrence"] == ["RRULE:FREQ=DAILY"]
        
        print("‚úÖ JSON structure is valid")
        print("‚úÖ Property names are properly quoted")
        print("‚úÖ RRULE value is correctly formatted as string in array")
        
    except Exception as e:
        print(f"‚ùå Still failing: {e}")
        return False
    
    # Test the fix step by step
    print("\nüîß Step-by-step fix verification:")
    
    # Step 1: Show the quasi-JSON fix
    fixed_json = tool._fix_quasi_json(failing_input)
    print(f"1. Quasi-JSON fix: {failing_input} ‚Üí {fixed_json}")
    
    # Step 2: Verify it's valid JSON
    try:
        parsed = json.loads(fixed_json)
        print(f"2. Valid JSON parsing: ‚úÖ")
        print(f"   Parsed result: {parsed}")
    except json.JSONDecodeError as e:
        print(f"2. JSON parsing failed: ‚ùå {e}")
        return False
    
    # Step 3: Verify the recurrence format
    if parsed.get("recurrence") == ["RRULE:FREQ=DAILY"]:
        print("3. Recurrence format: ‚úÖ Correct Google Calendar API format")
    else:
        print(f"3. Recurrence format: ‚ùå Expected ['RRULE:FREQ=DAILY'], got {parsed.get('recurrence')}")
        return False
    
    print("\nüéâ Original failing case is now FIXED!")
    return True


def test_comprehensive_recurrence_scenarios():
    """Test various recurrence scenarios that might be generated by agents."""
    
    print("\nüìÖ Testing Comprehensive Recurrence Scenarios")
    print("=" * 50)
    
    tool = GoogleCalendarTool(user=None, db=None, registry=None, user_access=None)
    
    test_cases = [
        # Daily recurrence
        ("{summary: Daily Meeting, recurrence: [RRULE:FREQ=DAILY]}", "Daily"),
        
        # Weekly recurrence
        ("{summary: Weekly Review, recurrence: [RRULE:FREQ=WEEKLY]}", "Weekly"),
        
        # Monthly recurrence
        ("{summary: Monthly Report, recurrence: [RRULE:FREQ=MONTHLY]}", "Monthly"),
        
        # Complex recurrence with count
        ("{summary: Training Series, recurrence: [RRULE:FREQ=WEEKLY;COUNT=4]}", "Weekly with count"),
        
        # Complex recurrence with specific days
        ("{summary: MWF Workout, recurrence: [RRULE:FREQ=WEEKLY;BYDAY=MO,WE,FR]}", "Specific weekdays"),
        
        # Full event with recurrence
        ("{summary: Team Standup, start: 2025-09-15T09:00:00+00:00, end: 2025-09-15T09:30:00+00:00, recurrence: [RRULE:FREQ=DAILY;COUNT=30]}", "Full event with recurrence"),
    ]
    
    for i, (test_input, description) in enumerate(test_cases, 1):
        print(f"\n{i}. Testing {description}:")
        print(f"   Input: {test_input}")
        
        try:
            result = tool._parse_event_data(test_input)
            print(f"   ‚úÖ Parsed successfully")
            print(f"   Recurrence: {result.get('recurrence')}")
            
            # Verify recurrence is preserved
            if "recurrence" in result and isinstance(result["recurrence"], list):
                print(f"   ‚úÖ Recurrence format is correct")
            else:
                print(f"   ‚ùå Recurrence format is incorrect")
                return False
                
        except Exception as e:
            print(f"   ‚ùå Failed: {e}")
            return False
    
    print("\nüéâ All recurrence scenarios working correctly!")
    return True


if __name__ == "__main__":
    success = True
    
    try:
        success &= test_original_failing_case()
        success &= test_comprehensive_recurrence_scenarios()
        
        if success:
            print("\nüéâ ALL TESTS PASSED!")
            print("‚úÖ Original failing case is fixed")
            print("‚úÖ JSON formatting is correct")
            print("‚úÖ Google Calendar API recurrence format is supported")
            print("‚úÖ Quasi-JSON parser handles RRULE patterns correctly")
            sys.exit(0)
        else:
            print("\n‚ùå Some tests failed.")
            sys.exit(1)
            
    except Exception as e:
        print(f"\nüí• Test suite failed with exception: {e}")
        import traceback
        traceback.print_exc()
        sys.exit(1)
